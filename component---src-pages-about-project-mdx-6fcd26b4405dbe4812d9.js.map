{"version":3,"file":"component---src-pages-about-project-mdx-6fcd26b4405dbe4812d9.js","mappings":"sJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oIAAqI,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,2BAA4BK,EAAAA,cAAoBR,EAAYI,EAAG,CAC3UK,KAAM,kCACL,mBAAoB,KAAMD,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,kCAAmC,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,iDAAkD,KAAMK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,kKAAmK,KAAMK,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,UAAW,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,8BAA+BK,EAAAA,cAAoBR,EAAYI,EAAG,CACtoBK,KAAM,uCACL,mBAAoB,uDAAwD,KAAMD,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,gKAAiK,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,aAAcK,EAAAA,cAAoBR,EAAYI,EAAG,CAC5bK,KAAM,iDACL,eAAgB,QAASD,EAAAA,cAAoBR,EAAYI,EAAG,CAC7DK,KAAM,oDACL,qBAAsB,gCAAiC,KAAMD,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,oBAAqB,KAAMG,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,mGAAoG,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,0CAA2C,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,qDAAsD,KAAMK,EAAAA,cAAoBR,EAAYG,EAAG,KAAM,oCAAqCK,EAAAA,cAAoBR,EAAYI,EAAG,CACtkBK,KAAM,kDACL,eAAgB,KACrB,CAKA,UAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,MAAsBP,EAAMQ,YAC3E,OAAOI,EAAYH,EAAAA,cAAoBG,EAAWZ,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,8FCSO,MAAMa,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WAAc,IAEO,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,IAChC,CAACO,EAAmBP,GACzB,CAGA,MAAMQ,EAAc,CAAC,EAQd,SAASC,GAAY,WAACT,EAAU,SAAEU,EAAQ,qBAAEC,IAEjD,IAAIC,EAWJ,OAREA,EADED,EAEsB,mBAAfX,EACHA,EAAW,CAAC,GACZA,GAAcQ,EAEJF,EAAiBN,GAG5B,gBACLK,EAAWQ,SACX,CAACC,MAAOF,GACRF,EAEJ,C","sources":["webpack://disney-api-site/./src/pages/aboutProject.mdx","webpack://disney-api-site/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Disney API is a restful and GraphQL API based on Disney characters. Using this API you can get information on Disney characters.\"), \"\\n\", React.createElement(_components.p, null, \"To start using this API \", React.createElement(_components.a, {\n    href: \"https://www.disneyapi.dev/docs\"\n  }, \"check the docs\")), \"\\n\", React.createElement(_components.h2, null, \"The reason behind this project\"), \"\\n\", React.createElement(_components.p, null, \"We are Disney fans and we love Open Source ❤︎\"), \"\\n\", React.createElement(_components.h2, null, \"Tech stack\"), \"\\n\", React.createElement(_components.p, null, \"This project was built using Node.js and a MongoDB database both deployed using Heroku. The docs website was built on Gatsby.js and hosted using GitHub Pages.\"), \"\\n\", React.createElement(_components.h2, null, \"Author\"), \"\\n\", React.createElement(_components.p, null, \"This project is created by \", React.createElement(_components.a, {\n    href: \"https://github.com/manuCastrillonM/\"\n  }, \"Manu Castrillon\"), \", software engineer, nerd, but mostly a Disney fan.\"), \"\\n\", React.createElement(_components.h2, null, \"Contribute\"), \"\\n\", React.createElement(_components.p, null, \"This is an open source project, that means you can contribute to it. Contributing you can help us improve this project so it can be used by more developers.\"), \"\\n\", React.createElement(_components.p, null, \"Check the \", React.createElement(_components.a, {\n    href: \"https://github.com/ManuCastrillonM/disney-api\"\n  }, \"Backend API\"), \" and \", React.createElement(_components.a, {\n    href: \"https://github.com/ManuCastrillonM/disneyapi.dev\"\n  }, \"Frontend API docs\"), \" repositories to contribute.\"), \"\\n\", React.createElement(_components.h2, null, \"Copyright notice\"), \"\\n\", React.createElement(_components.p, null, \"We are bulding this project without claiming any ownership about the data or images used on it.\"), \"\\n\", React.createElement(_components.p, null, \"Disney belongs to Walt Disney Company.\"), \"\\n\", React.createElement(_components.p, null, \"This project is Open Source and uses BSD license.\"), \"\\n\", React.createElement(_components.p, null, \"The info has been collected from \", React.createElement(_components.a, {\n    href: \"https://disney.fandom.com/wiki/The_Disney_Wiki\"\n  }, \"Disney Wiki\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","_provideComponents","components","React","href","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}